https://mathsci2.appstate.edu/~wmcb/Class/4310/ClassNotes131/Romberg_Program_Listings.pdf

https://informatique-python.readthedocs.io/fr/latest/Exercices/equationEtat.html

https://antoinevastel.com/algorithme/python/algorithmes%20g%C3%A9n%C3%A9tiques/2016/04/30/probleme-voyageur-commerce.html

http://www.monlyceenumerique.fr/nsi_premiere/algo_a/a4_algo_knn.html

Ex 1 


import numpy as np
import matplotlib.pyplot as plt

def f1(x):
   f1 = x
   return f1;

def trapezoid(f,a,b,N):
    h   = (b-a)/N
    xi  = np.linspace(a,b,N+1)
    fi  = f(xi)
    s   = 0.0
    for i in range(1,N):
        s = s + fi[i]
    s = (h/2)*(fi[0] + fi[N]) + h*s
    return s

def romberg(f,a,b,eps,nmax):
    Q         = np.zeros((nmax,nmax),float)
    converged = 0
    for i in range(0,nmax):
        N      = 2**i
        Q[i,0] = trapezoid(f,a,b,N)
        for k in range(0,i):
            n        = k + 2
            Q[i,k+1] = 1.0/(4**(n-1)-1)*(4**(n-1)*Q[i,k] - Q[i-1,k])
        if (i > 0):
            if (abs(Q[i,k+1] - Q[i,k]) < eps):
               converged = 1
               break
    print (Q[i,k+1],N,converged)   
    return Q[i,k+1],N,converged


a  = 0.0;b = 2.0 
romberg(f1,a,b,1.0e-6,10) 

https://informatique-python.readthedocs.io/fr/latest/Annales/exam_1501.html



#!/usr/bin/env python3

import numpy as N
import matplotlib.pyplot as P

import pytest                    # pytest importe pour les tests unitaires

"""
Construction d'un systÃ¨me d'extraction et d'analyse de fichiers de sortie de
dynamique molÃ©culaire afin d'extraire les grandeurs thermodynamiques.
On affichera les ensuite isothermes.
"""

tolerance = 1e-8  # Un seuil de tolÃ©rance pour les Ã©galitÃ©s sur rÃ©els


##############################
##### A Simulation class #####
##############################

class Simulation:
    """
    La classe Simulation reprÃ©sente une simulation de dynamique
    molÃ©culaire, donc un point de l'Ã©quation d'Ã©tat. Son constructeur
    doit impÃ©rativement Ãªtre appelÃ© avec le chemin du fichier output
    correspondant. Elle possÃ¨de des mÃ©thodes pour extraire les grandeurs
    thermodynamiques et afficher la run, en pouvant enlever certains pas
    de temps en dÃ©but de simulation.
    """

    def __init__(self, temp, dens, path):
        """
        Le constructeur doit impÃ©rativement Ãªtre appelÃ© avec le chemin du
        fichier dÃ©crivant la simulation, ainsi que ses conditions
        thermodynamiques.

        Args :
                temp,dens(float): La tempÃ©rature et la densitÃ© de la simulation
                path(string): Le chemin vers le fichier dÃ©crivant la simulation

        Raises :
                TypeError si temp ou dens ne sont pas des rÃ©els
                IOError si le fichier n'existe pas
        """
        self.temp = float(temp)
        self.dens = float(dens)
        tmp = N.loadtxt(path, skiprows=1).T
        self.pot = tmp[0]
        self.kin = tmp[1]
        self.tot = self.pot + self.kin
        self.press = tmp[2]

    def __str__(self):
        """
        Surcharge de l'opÃ©rateur str.
        """
        return "Simulation at {:.0f} g/cc and {:.0f} K ; {:d} timesteps". \
            format(self.dens, self.temp, len(self.pot))

    def thermo(self, skipSteps=0):
        """
        Calcule l'Ã©nergie et la pression moyenne au cours de la simulation.
        Renvoie un dictionnaire.

        Args:
                skipSteps(int): Nb de pas Ã  enlever en dÃ©but de simulation.

        Returns:
                {'T':temperature, 'rho':density,
                 'E':energy, 'P':pressure,
                 'dE':dEnergy, 'dP':dPressure}
        """
        return {'T': self.temp,
                'rho': self.dens,
                'E': self.tot[skipSteps:].mean(),
                'P': self.press[skipSteps:].mean(),
                'dE': self.tot[skipSteps:].std(),
                'dP': self.press[skipSteps:].std()}

    def plot(self, skipSteps=0):
        """
        Affiche l'Ã©volution de la Pression et l'Ã©nergie interne au cours de
        la simulation.

        Args:
                skipSteps(int): Pas de temps Ã  enelevr en dÃ©but de simulation.

        Raises:
                TypeError si skipSteps n'est pas un entier.
        """
        fig, (axen, axpress) = P.subplots(2, sharex=True)
        axen.plot(list(range(skipSteps, len(self.tot))), self.tot[skipSteps:],
                  'rd--')
        axen.set_title("Internal energy (Ha)")
        axpress.plot(list(range(skipSteps, len(self.press))), self.press[skipSteps:],
                     'rd--')
        axpress.set_title("Pressure (GPa)")
        axpress.set_xlabel("Timesteps")

        P.show()

##### Tests pour Simulation #####


def mimic_simulation(filename):
    with open(filename, 'w') as f:
        f.write("""Potential energy (Ha)	Kinetic Energy (Ha)	Pressure (GPa)
-668.2463567264        	0.7755612311   		9287.7370229824
-668.2118514558        	0.7755612311		9286.1395903265
-668.3119088218        	0.7755612311		9247.6604398856
-668.4762735176        	0.7755612311		9191.8574820856
-668.4762735176        	0.7755612311		9191.8574820856
""")


def test_Simulation_init():
    mimic_simulation("equationEtat_simuTest.out")
    s = Simulation(10, 10, "equationEtat_simuTest.out")
    assert len(s.kin) == 5
    assert abs(s.kin[2] - 0.7755612311) < tolerance
    assert abs(s.pot[1] + 668.2118514558) < tolerance


def test_Simulation_str():
    mimic_simulation("equationEtat_simuTest.out")
    s = Simulation(10, 20, "equationEtat_simuTest.out")
    assert str(s) == "Simulation at 20 g/cc and 10 K ; 5 timesteps"


def test_Simulation_thermo():
    mimic_simulation("equationEtat_simuTest.out")
    s = Simulation(10, 20, "equationEtat_simuTest.out")
    assert abs(s.thermo()['T'] - 10) < tolerance
    assert abs(s.thermo()['rho'] - 20) < tolerance
    assert abs(s.thermo()['E'] + 667.56897157674) < tolerance
    assert abs(s.thermo()['P'] - 9241.0504034731) < tolerance
    assert abs(s.thermo(3)['E'] + 667.7007122865) < tolerance
    assert abs(s.thermo(3)['P'] - 9191.8574820856) < tolerance

###################
### Main script ###
###################

if __name__ == '__main__':
    """
    On dÃ©finit un certain nombre de pas de temps Ã  sauter, puis on
    charge chaque simulation et extrait les informaions thermodynamiques
    associÃ©es. On affiche enfin les isothermes normalisÃ©es (E/NkT et P/nkT).
    """

    ### Definitions ###
    a0 = 0.52918      # Bohr radius in angstrom
    amu = 1.6605      # atomic mass unit in e-24 g
    k_B = 3.16681e-6  # Boltzmann's constant in Ha/K
    # normalization factor for P/nkT
    nk_GPa = a0 ** 3 * k_B * 2.942e4 / 6 / amu
    nsteps = 200  # define skipped timesteps (should be done for
    # each simulation...)
    temps = [6000, 20000, 50000]    # define temperatures
    colors = {6000: 'r', 20000: 'b', 50000: 'k'}
    denss = [7, 15, 25, 30]  # define densities
    keys = ['T', 'rho', 'E', 'dE', 'P', 'dP']
    eos = dict.fromkeys(keys, N.zeros(0))   # {key:[]}

    ### Extract the EOS out of the source files ###
    for t, rho in [(t, rho) for t in temps for rho in denss]:
        filenm = "outputs/{}K_{:0>2d}gcc.out".format(t, rho)
        s = Simulation(t, rho, filenm)
        for key in keys:
            eos[key] = N.append(eos[key], s.thermo(nsteps)[key])

    ### Plot isotherms ###
    fig, (axen, axpress) = P.subplots(2, sharex=True)
    fig.suptitle("High-pressure equation of state for water", size='x-large')
    axen.set_title("Energy")
    axen.set_ylabel("U / NkT")
    axpress.set_title("Pressure")
    axpress.set_ylabel("P / nkT")
    axpress.set_xlabel("rho (g/cc)")
    for t in temps:
        sel = eos['T'] == t
        axen.errorbar(x=eos['rho'][sel], y=eos['E'][sel] / k_B / t,
                      yerr=eos['dE'][sel] / k_B / t, fmt=colors[t] + '-')
        axpress.errorbar(x=eos['rho'][sel],
                         y=eos['P'][sel] / eos['rho'][sel] / nk_GPa / t,
                         yerr=eos['dP'][sel] / eos['rho'][sel] / nk_GPa / t,
                         fmt=colors[t] + '-',
                         label="{} K".format(t))
    axpress.legend(loc='best')
    P.show()

Ex 1 

import numpy as np
import matplotlib.pyplot as plt

def f1(x):
   f1 = x**4.0
   return f1;

def f2(x):
   f2 = np.exp(-x*x)
   return f2;

def f3(x):
   tau   = 1.0e-8
   f3    = np.where(np.abs(x)<tau,1.0,np.sin(x)/x)
   return f3;

# trapezoidal rule
def trapezoid(f,a,b,N):
    h   = (b-a)/N
    xi  = np.linspace(a,b,N+1)
    fi  = f(xi)
    s   = 0.0
    for i in range(1,N):
        s = s + fi[i]
    s = (h/2)*(fi[0] + fi[N]) + h*s
    return s

# romberg method
def romberg(f,a,b,eps,nmax):
# f     ... function to be integrated
# [a,b] ... integration interval
# eps   ... desired accuracy
# nmax  ... maximal order of Romberg method
    Q         = np.zeros((nmax,nmax),float)
    converged = 0
    for i in range(0,nmax):
        N      = 2**i
        Q[i,0] = trapezoid(f,a,b,N)
        for k in range(0,i):
            n        = k + 2
            Q[i,k+1] = 1.0/(4**(n-1)-1)*(4**(n-1)*Q[i,k] - Q[i-1,k])
        if (i > 0):
            if (abs(Q[i,k+1] - Q[i,k]) < eps):
               converged = 1
               break
    print Q[i,k+1],N,converged    
    return Q[i,k+1],N,converged

# main program
a  = 0.0;b = 1.0  # integration interval [a,b]
romberg(f1,a,b,1.0e-12,10)
romberg(f2,a,b,1.0e-12,10)
a  = 0.0;b = 20.0*np.pi  # integration interval [a,b]
romberg(f3,a,b,1.0e-12,10)


Ex 3 : 

#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Proposition d'examen final "Outils numÃ©riques et programmation", janvier 2015.
"""

from __future__ import division

__author__ = 'Yannick Copin <y.copin@ipnl.in2p3.fr>'

import math
import numpy as N
import pytest

import matplotlib.pyplot as P

N.random.seed(123)
TAILLE = 50

class Ville(object):

    """
    Ville, contient une liste (non-ordonnÃ©e) de destinations.
    """

    def __init__(self):
        """Initialisation d'une ville sans destination."""

        self.destinations = N.array([]).reshape(-1, 2)

    def __str__(self):

        return "Ville: {} destinations ({} trajets)".format(
            len(self.destinations), self.nb_trajets())

    def aleatoire(self, n=20):
        """CrÃ©ation de *n* destinations alÃ©atoires."""

        self.destinations = N.random.randint(TAILLE, size=(n, 2))

    def lecture(self, nomfichier="ville.dat"):
        """
        Lecture d'un fichier ASCII donnant les coordonnÃ©es des destinations.
        """

        try:
            self.destinations = N.loadtxt(nomfichier, dtype=int)
            if self.destinations.ndim != 2 or self.destinations.shape[1] != 2:
                raise IOError
        except IOError:
            raise IOError("Le fichier {!r} est invalide".format(nomfichier))

    def ecriture(self, nomfichier="ville.dat"):
        """
        Ã‰criture d'un fichier ASCII avec les coordonnÃ©es des destinations.
        """

        N.savetxt(nomfichier, self.destinations, fmt='%d')

    def nb_trajets(self):
        """Retourne le nombre total (entier) de trajets: (n-1)!/2."""

        ndest = len(self.destinations)
        if ndest > 2:
            return int(math.factorial(ndest - 1) / 2)
        elif ndest > 0:
            return 1
        else:
            return 0

    def distance(self, i, j):
        """
        Retourne la distance Manhattan-L1 entre les destinations numÃ©ro
        *i* et *j*.
        """

        return N.abs(self.destinations[i] - self.destinations[j]).sum()

    def plus_proche(self, i, exclus=[]):
        """
        Retourne la destination la plus proche de la destination *i*, hors les
        destinations de la liste `exclus`.
        """

        voisins = [ j for j in range(len(self.destinations))
                    if j != i and j not in exclus ]
        distances = [ self.distance(i, j) for j in voisins ]

        return voisins[N.argmin(distances)]

    def trajet_voisins(self, depart=0):
        """
        Retourne un `Trajet` dÃ©terminÃ© selon l'heuristique des plus proches
        voisins (i.e. l'Ã©tape suivante est la destination la plus proche hors
        les destinations dÃ©jÃ  visitÃ©es) en partant de l'Ã©tape initiale
        `depart`.
        """

        ndest = len(self.destinations)
        if depart is None:     # Boucle sur tous les dÃ©parts possibles
            trajets = [ self.trajet_voisins(depart=i) for i in range(ndest) ]
            longueurs = [ t.longueur() for t in trajets ]

            return trajets[N.argmin(longueurs)]
        else:                  # DÃ©part imposÃ©
            etapes = [depart]
            while len(etapes) < ndest:
                i = etapes[-1]
                j = self.plus_proche(i, exclus=etapes[:-1])
                etapes.append(j)

            return Trajet(self, etapes)

    def optimisation_trajet(self, trajet):
        """
        Retourne le trajet le plus court de tous les trajets Â« voisins Â» Ã 
        `trajet` (i.e. rÃ©sultant d'une simple interversion de 2 Ã©tapes).
        """

        ndest = len(self.destinations)
        trajets = [ trajet.interversion(i, j)
                    for i in range(ndest) for j in range(i+1, ndest) ]
        longueurs = [ t.longueur() for t in trajets ]
        opt = trajets[N.argmin(longueurs)]
        if opt.longueur() > trajet.longueur():
            opt = trajet

        return opt

    def trajet_opt2(self, trajet=None, maxiter=100):
        """
        Ã€ partir d'un `trajet` initial (par dÃ©faut le trajet des plus proches
        voisins), retourne un `Trajet` optimisÃ© de faÃ§on itÃ©rative par
        interversion successive de 2 Ã©tapes.  Le nombre maximum d'itÃ©ration est
        `maxiter`.
        """

        if trajet is None:
            trajet = self.trajet_voisins()

        for i in range(maxiter):
            opt = self.optimisation_trajet(trajet)
            if opt.longueur() == trajet.longueur():
                break
            else:
                print "Optimisation: L={} -> {}".format(
                    trajet.longueur(), opt.longueur())
                trajet = opt
        print "opt2: optimisation en {} iterations".format(i+1)

        return opt

    def figure(self, trajet=None, ax=None, offset=0):
        """
        Visualisation d'une ville et d'un trajet.
        """

        if ax is None:
            fig = P.figure(figsize=(6,6))
            ax = fig.add_subplot(1,1,1, aspect='equal',
                                 xlim=(0, TAILLE), ylim=(0, TAILLE),
                                 title="{} destinations".format(
                                     len(self.destinations)))
            minor_loc = P.matplotlib.ticker.MultipleLocator(1)
            ax.xaxis.set_minor_locator(minor_loc)
            ax.yaxis.set_minor_locator(minor_loc)
            ax.autoscale(False)

        if trajet is None:
            ax.plot(self.destinations[:, 0], self.destinations[:, 1],
                    'ko', zorder=10)
            for i,(x,y) in enumerate(self.destinations):
                #ax.text(x, y, ' '+str(i))
                ax.annotate(str(i), xy=(x, y), xytext=(x+0.5, y+0.5), zorder=10)
        else:
            boucle = N.concatenate((trajet.etapes, [trajet.etapes[0]]))
            ax.step(self.destinations[boucle, 0] + offset,
                    self.destinations[boucle, 1] + offset,
                    label="L={}".format(trajet.longueur()))

        return ax


class Trajet(object):

    """
    Trajet, contient une liste ordonnÃ©e des destinations (Ã©tapes) d'une
    Ville.
    """

    def __init__(self, ville, etapes=None):
        """
        Initialisation sur une `ville`.  Si `etapes` n'est pas spÃ©cifiÃ©, le
        trajet par dÃ©faut est celui suivant les destinations de `ville`.
        """

        assert isinstance(ville, Ville)
        self.ville = ville
        if etapes is None:                     # Trajet par dÃ©faut
            self.etapes = N.arange(len(self.ville.destinations))
        else:
            self.etapes = N.array(etapes)

    def __str__(self):

        return "{}-trajet L={}: {}".format(
            len(self.etapes), self.longueur(), self.etapes)

    def longueur(self):
        """
        Retourne la longueur totale du trajet *bouclÃ©* (i.e. revenant Ã  son
        point de dÃ©part).
        """

        l = sum( self.ville.distance(self.etapes[i], self.etapes[i+1])
                 for i in range(len(self.etapes)-1) )
        l += self.ville.distance(self.etapes[-1], self.etapes[0])

        return l

    def interversion(self, i, j):
        """
        Retourne un nouveau `Trajet` rÃ©sultant de l'interversion des 2 Ã©tapes
        *i* et *j*.
        """

        etapes = self.etapes.copy()
        etapes[[i, j]] = etapes[[j, i]]

        return Trajet(self.ville, etapes)


def fig_velocimetrie(nomfichier="velocimetrie.dat"):
    """
    CorrigÃ© de l'exercice 1, en utilisant `pyplot`, l'API-OO de matplotlib.
    """

    # Lecture du fichier d'entrÃ©e, en sautant la 1Ã¨re ligne
    t, vel = N.loadtxt(nomfichier, skiprows=1, unpack=True)

    dt = t[1] - t[0]            # Pas de temps [ms]
    assert N.allclose(N.diff(t), dt), "Ã‰chantillonage en temps non-uniforme"

    fig = P.figure()

    # 1er axe: v(t)
    ax1 = fig.add_subplot(3, 1, 1,
                          ylabel="Vitesse [mm/s]",
                          title=nomfichier)
    ax1.plot(t, vel)

    # 2nd axe: x(t)
    ax2 = fig.add_subplot(3, 1, 2,
                          ylabel=u"DÃ©placement [Âµm]")
    ax2.plot(t, N.cumsum(vel) * dt)

    # 3Ã¨me axe: a(t)
    ax3 = fig.add_subplot(3, 1, 3,
                          xlabel="Temps [ms]",
                          ylabel=u"AccÃ©lÃ©ration [m/sÂ²]")
    tmid = 0.5 * (t[1:] + t[:-1])
    ax3.plot(tmid, N.diff(vel) / dt)

    return fig


# TESTS ==============================

def test_ville_aleatoire():

    ville = Ville()
    ville.aleatoire(10)
    assert ville.destinations.shape == (10, 2)
    assert N.issubdtype(ville.destinations.dtype, int)

def test_ville_lecture():

    ville = Ville()
    ville.lecture("ville.dat")
    assert ville.destinations.shape == (20, 2)
    assert (ville.destinations[:3] == [[45, 2], [28, 34], [38, 17]]).all()

@pytest.fixture
def ville_test():

    ville = Ville()
    ville.destinations = N.array([[0, 0], [1, 1], [3, 0], [2, 2]])
    return ville

def test_ville_ecriture(ville_test):

    ville_test.ecriture("test_ecriture.dat")
    ville = Ville()
    ville.lecture("test_ecriture.dat")
    assert (ville_test.destinations == ville.destinations).all()

def test_ville_trajets(ville_test):

    assert ville_test.nb_trajets() == 3

def test_ville_distance(ville_test):

    assert ville_test.distance(0, 1) == 2
    assert ville_test.distance(1, 2) == 3
    assert ville_test.distance(2, 0) == 3

def test_trajet_init(ville_test):

    trajet = Trajet(ville_test)
    assert (trajet.etapes == range(4)).all()

@pytest.fixture
def trajet_test(ville_test):

    return Trajet(ville_test)

def test_trajet_longueur(trajet_test):

    assert trajet_test.longueur() == 12

def test_ville_plus_proche(ville_test):

    assert ville_test.plus_proche(0) == 1
    assert ville_test.plus_proche(0, [1, 2]) == 3

def test_ville_trajet_voisins(ville_test):

    assert (ville_test.trajet_voisins(depart=0).etapes == [0, 1, 3, 2]).all()

def test_trajet_interversion(trajet_test):

    assert (trajet_test.interversion(0, 1).etapes == [1, 0, 2, 3]).all()

def test_ville_optimisation_trajet(ville_test, trajet_test):

    assert (ville_test.optimisation_trajet(trajet_test).etapes ==
            [1, 0, 2, 3]).all()

# def test_ville_ppv():

#     ville = Ville()
#     ville.lecture("ville.dat")
#     assert ville.trajet_voisins(depart=0).longueur() == 288

# def test_ville_opt2():

#     ville = Ville()
#     ville.lecture("ville.dat")
#     assert ville.trajet_opt2().longueur() == 276

if __name__ == '__main__':

    import os

    # Exercice ==============================

    fig = fig_velocimetrie("velocimetrie.dat")
    fig.savefig("velocimetrie.png")

    # ProblÃ¨me ==============================

    # Utilisation optionnelle de la charte graphique seaborn
    try:
        import seaborn
        seaborn.set_style("white")
        seaborn.set_palette("cubehelix_r", 4)
    except ImportError:
        pass

    ville = Ville()
    if not os.path.exists("ville.dat"):
        ville.aleatoire(n=20)
        print ville
        ville.ecriture("ville.dat")
    else:
        ville.lecture("ville.dat")

    # Destinations dans la ville
    ax = ville.figure()

    # Trajet alÃ©atoire
    trajet = Trajet(ville)
    print trajet
    ville.figure(trajet, ax=ax, offset=-0.3)

    # Trajet "plus proche voisins"
    trajet_voisins = ville.trajet_voisins(depart=0)
    print "Trajet PPV:", trajet_voisins
    ville.figure(trajet_voisins, ax=ax)

    # Trajet "opt-2"
    trajet_opt2 = ville.trajet_opt2(trajet_voisins)
    print "Trajet PPV + opt-2:", trajet_opt2
    ville.figure(trajet_opt2, ax=ax, offset=0.3)

    # LÃ©gende
    h, l = ax.get_legend_handles_labels()
    ax.figure.legend(h, l, fontsize='small', loc='upper right')

    P.show()

https://informatique-python.readthedocs.io/fr/latest/Exercices/exo.html

https://informatique-python.readthedocs.io/fr/latest/Annales/exam_1501.html

TP Python 

Exercice 1:
https://mathsci2.appstate.edu/~wmcb/Class/4310/ClassNotes131/Romberg_Program_Listings.pdf
https://physik.uni-graz.at/~pep/CompOriPhys/Python/romberg.py
https://f-legrand.fr/scidoc/srcdoc/numerique/bulirsch/romberg/romberg-pdf.pdf



Exercice 2: 
https://informatique-python.readthedocs.io/fr/latest/Exercices/equationEtat.html

Exercice 3: GROUPE CPE


